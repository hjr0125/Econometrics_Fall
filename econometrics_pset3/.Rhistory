#| warning: FALSE
#| paged.print: FALSE
rm(list=ls())
library(dplyr) #dataframe management
library(haven) #library for importing data set
library(psych) #library for trace matrix
ajr <- read_dta("AJR2001.dta")
#| include: FALSE
library(kableExtra)
Y <- as.matrix(ajr$loggdp)
X <- as.matrix(ajr %>%
select(risk) %>%
bind_cols(data.frame(con=rep(1,nrow(ajr)))))
X.endo <- X[,1]
X.exo <- X[,2]
Z <- as.matrix(ajr %>%
select(logmort0) %>%
mutate(logmort0sq = logmort0^2) %>%
bind_cols(data.frame(con=rep(1,nrow(ajr)))))
b2sls <- solve(t(X)%*%Z%*%solve(t(Z)%*%Z)%*%t(Z)%*%X)%*%t(X)%*%Z%*%
solve(t(Z)%*%Z)%*%t(Z)%*%Y
e_hat2sls <- Y - X %*% b2sls
w <- Z*(e_hat2sls%*%matrix(1,1,ncol(Z)))
O <- t(w)%*%w
bgmm <- solve(t(X)%*%Z%*%solve(O)%*%t(Z)%*%X)%*%(t(X)%*%Z%*%solve(O)%*%t(Z)%*%Y)
vgmm <- solve((t(X)%*%Z)%*%solve(O)%*%(t(Z)%*%X))
segmm <- sqrt(diag(vgmm))
#| echo: FALSE
result_a <- cbind(bgmm,segmm)
result_a <- round(result_a,2)
colnames(result_a) <- c('Coefficient','Standard errors')
knitr::kable(result_a,caption = 'Coefficient estimates and S.E.',
booktabs = T)%>%
kable_styling(latex_options = "HOLD_position")
J <- t(t(Z)%*%Y-t(Z)%*%X%*%bgmm)%*%solve(O)%*%(t(Z)%*%Y-t(Z)%*%X%*%bgmm)
J
p <- 1 - pchisq(J,1)
p
p <- 1 - pchisq(3.8)
p <- 1 - pchisq(3.8,1)
p
p <- 1 - pchisq(388,1)
p
p <- 1 - pchisq(8,1)
p
p <- 1 - pchisq(J,1)
p
#| include: FALSE
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(dplyr) #dataframe management
library(haven) #library for importing data set
library(psych) #library for trace matrix
library(momentfit)
ajr <- read_dta("AJR2001.dta")
ajr <- ajr %>% mutate(logmort0sq = logmort0^2)
mod <- momentModel(loggdp ~ risk, ~logmort0 + logmort0sq, data= ajr)
res <- tsls(loggdp ~ risk, ~logmort0 + logmort0sq, data= ajr,vcov = 'CL')
summary(res)
?tsls
rm(list=ls())
library(dplyr) #dataframe management
library(haven) #library for importing data set
library(psych) #library for trace matrix
library(momentfit)
ajr <- read_dta("AJR2001.dta")
ajr <- ajr %>% mutate(logmort0sq = logmort0^2)
mod <- momentModel(loggdp ~ risk, ~logmort0 + logmort0sq, data= ajr)
res <- tsls(mod)
summary(res)
rm(list=ls())
library(dplyr) #dataframe management
library(haven) #library for importing data set
library(psych) #library for trace matrix
library(momentfit)
ajr <- read_dta("AJR2001.dta")
ajr <- ajr %>% mutate(logmort0sq = logmort0^2)
mod <- momentModel(loggdp ~ risk, ~logmort0 + logmort0sq, data= ajr,vcov='MDS')
res <- tsls(mod)
summary(res)
library(xtable)
library(xtable)
library(xtable)
rm(list=ls())
library(dplyr) #dataframe management
library(haven) #library for importing data set
library(psych) #library for trace matrix
library(momentfit)
library(xtable)
ajr <- read_dta("AJR2001.dta")
ajr <- ajr %>% mutate(logmort0sq = logmort0^2)
mod <- momentModel(loggdp ~ risk, ~logmort0 + logmort0sq, data= ajr,vcov='MDS')
res <- tsls(mod)
print(xtable(summary(res)),type='html')
w <- Z*(e_hat2sls%*%matrix(1,1,ncol(Z)))
O <- t(w)%*%w
rm(list=ls())
library(dplyr) #dataframe management
library(haven) #library for importing data set
library(psych) #library for trace matrix
library(momentfit)
library(xtable)
ajr <- read_dta("AJR2001.dta")
ajr <- ajr %>% mutate(logmort0sq = logmort0^2)
mod <- momentModel(loggdp ~ risk, ~logmort0 + logmort0sq, data= ajr,vcov='MDS')
res <- tsls(mod)
res
library(modelsummary)
install.packages('modelsummary')
library(modelsummary)
rm(list=ls())
library(dplyr) #dataframe management
library(haven) #library for importing data set
library(psych) #library for trace matrix
library(momentfit)
library(modelsummary)
ajr <- read_dta("AJR2001.dta")
ajr <- ajr %>% mutate(logmort0sq = logmort0^2)
mod <- momentModel(loggdp ~ risk, ~logmort0 + logmort0sq, data= ajr,vcov='MDS')
res <- tsls(mod)
modelsummary(res)
rm(list=ls())
library(dplyr) #dataframe management
library(haven) #library for importing data set
library(psych) #library for trace matrix
library(momentfit)
library(modelsummary)
library(ivreg)
ajr <- read_dta("AJR2001.dta")
ajr <- ajr %>% mutate(logmort0sq = logmort0^2)
# mod <- momentModel(loggdp ~ risk, ~logmort0 + logmort0sq, data= ajr,vcov='MDS')
# res <- tsls(mod)
res <- ivreg(loggdp ~ risk|logmort0 + logmort0sq, data= ajr)
modelsummary(res)
?ivreg
bgmm <- solve(t(X)%*%Z%*%solve(O)%*%t(Z)%*%X)%*%(t(X)%*%Z%*%solve(O)%*%t(Z)%*%Y)
rm(list=ls())
library(dplyr) #dataframe management
library(haven) #library for importing data set
library(psych) #library for trace matrix
library(momentfit)
library(modelsummary)
library(ivreg)
ajr <- read_dta("AJR2001.dta")
ajr <- ajr %>% mutate(logmort0sq = logmort0^2)
# mod <- momentModel(loggdp ~ risk, ~logmort0 + logmort0sq, data= ajr,vcov='MDS')
# res <- tsls(mod)
res <- ivreg(loggdp ~ risk|logmort0 + logmort0sq, data= ajr)
modelsummary(res,vcov = sandwich::sandwich)
modelsummary(res,vcov = sandwich::sandwich,fmt = 2)
# mod <- momentModel(loggdp ~ risk, ~logmort0 + logmort0sq, data= ajr,vcov='MDS')
# res <- tsls(mod)
res <- ivreg(loggdp ~ risk|logmort0 + logmort0sq, data= ajr)
mod <- list()
mod[['2SLS']] <- res
modelsummary(res,vcov = sandwich::sandwich,fmt = 2,gof_map = NA,title='2SLS results from problem 12.22')
modelsummary(mod,vcov = sandwich::sandwich,fmt = 2,gof_map = NA,title='2SLS results from problem 12.22')
source("C:/Users/owner/Desktop/econometrics_pset3/gmmwithpackage.R", echo=TRUE)
source("C:/Users/owner/Desktop/econometrics_pset3/gmmwithpackage.R", echo=TRUE)
# Running GMM
lin_gmm_mod = gmm(
g = y ~ x,
x = Z
)
source("C:/Users/owner/Desktop/econometrics_pset3/gmmwithpackage.R", echo=TRUE)
lm.fit(Z,X.endo)
lm.fit(Z,X.endo)
mod1 <- lm.fit(Z,X.endo)
mod1$residuals
source("C:/Users/owner/Desktop/econometrics_pset3/gmmwithpackage.R", echo=TRUE)
source("C:/Users/owner/Desktop/econometrics_pset3/gmmwithpackage.R", echo=TRUE)
Z[,1]
Z\
Z
source("C:/Users/owner/Desktop/econometrics_pset3/gmmwithpackage.R", echo=TRUE)
source("C:/Users/owner/Desktop/econometrics_pset3/gmmwithpackage.R", echo=TRUE)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
X.endo = Z[,-3]
)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z[,-3]
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X,
x = Z
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z
)
# Reporting results
summary(lin_gmm_mod)
?gmm
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,vcov = 'HAC'
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,vcov = 'iid'
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,vcov = 'TrueFixed'
)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,vcov = 'HAC'
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,vcov = sandwich::sandwich
)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'cue'
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'iterative'
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twostep'
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twoStep'
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twoStep',vcov = 'MDS'
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twoStep',vcov = 'HAC'
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twoStep',vcov = 'MDS'
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twoStep',vcov = 'MDS',wmatrix = 'optimal'
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twoStep',vcov = 'MDS',wmatrix = 'ident'
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'iterative',vcov = 'MDS',wmatrix = 'ident'
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'iterative',vcov = 'MDS',wmatrix = 'ident',itermax=10000
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'iterative',vcov = 'MDS',wmatrix = 'optimal',itermax=10000
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twoStep',vcov = 'MDS',wmatrix = 'optimal'
)
# Reporting results
summary(lin_gmm_mod)
source("C:/Users/owner/Desktop/econometrics_pset3/gmmwithpackage_other.R", echo=TRUE)
source("C:/Users/owner/Desktop/econometrics_pset3/gmmwithpackage.R", echo=TRUE)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twoStep',vcov = 'CL',wmatrix = 'optimal'
)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twoStep',vcov = 'HAC',wmatrix = 'optimal'
)
# Reporting results
summary(lin_gmm_mod)
rm(list=ls())
library(dplyr) #dataframe management
library(haven) #library for importing data set
library(psych) #library for trace matrix
library(momentfit)
ajr <- read_dta("AJR2001.dta")
ajr <- ajr %>% mutate(logmort0sq = logmort0^2)
Y <- as.matrix(ajr$loggdp)
X <- as.matrix(ajr %>%
select(risk) %>%
bind_cols(data.frame(con=rep(1,nrow(ajr)))))
X.endo <- X[,1]
X.exo <- X[,2]
Z <- as.matrix(ajr %>%
select(logmort0) %>%
mutate(logmort0sq = logmort0^2) %>%
bind_cols(data.frame(con=rep(1,nrow(ajr)))))
?gmm4
rm(list=ls())
library(dplyr) #dataframe management
library(haven) #library for importing data set
library(psych) #library for trace matrix
library(gmm)
install.packages('tidyverse')
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twoStep',vcov = 'HAC',wmatrix = 'optimal'
)
source("C:/Users/owner/Desktop/econometrics_pset3/gmmwithpackage.R", echo=TRUE)
?gmm
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'iterative',vcov = 'HAC',wmatrix = 'optimal',itermax = 2
)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'iterative',vcov = 'HAC',wmatrix = 'optimal',itermax = 3
)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'iterative',vcov = 'HAC',wmatrix = 'optimal',itermax = 4
)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'iterative',vcov = 'HAC',wmatrix = 'optimal',itermax = 5
)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'iterative',vcov = 'HAC',wmatrix = 'optimal',itermax = 10
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'iterative',vcov = 'HAC',wmatrix = 'optimal',itermax = 100
)
# Reporting results
summary(lin_gmm_mod)
rm(list=ls())
library(dplyr) #dataframe management
library(haven) #library for importing data set
library(psych) #library for trace matrix
library(gmm)
ajr <- read_dta("AJR2001.dta")
ajr <- ajr %>% mutate(logmort0sq = logmort0^2)
Y <- as.matrix(ajr$loggdp)
X <- as.matrix(ajr %>%
select(risk) %>%
bind_cols(data.frame(con=rep(1,nrow(ajr)))))
X.endo <- X[,1]
X.exo <- X[,2]
Z <- as.matrix(ajr %>%
select(logmort0) %>%
mutate(logmort0sq = logmort0^2) %>%
bind_cols(data.frame(con=rep(1,nrow(ajr)))))
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'iterative',vcov = 'HAC',wmatrix = 'optimal',itermax = 100
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twoStep',vcov = 'HAC',wmatrix = 'optimal',itermax = 100
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twoStep',vcov = 'HAC',weightsMatrix =diag(3),itermax = 100
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'iterative',vcov = 'HAC',weightsMatrix =diag(3),itermax = 100
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twoStep',vcov = 'HAC',weightsMatrix =diag(3),itermax = 100
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'iterative',vcov = 'HAC',traceIter = T,itermax = 100
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twoStep',vcov = 'HAC',traceIter = T,itermax = 100
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twoStep',kernel = 'Truncated',traceIter = T,itermax = 100
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twoStep',kernel = 'Bartlett',traceIter = T,itermax = 100
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twoStep',kernel = 'Parzen',traceIter = T,itermax = 100
)
# Reporting results
summary(lin_gmm_mod)
# Running GMM
lin_gmm_mod = gmm(
g = Y ~ X.endo,
x = Z,type = 'twoStep',traceIter = T,itermax = 100
)
# Reporting results
summary(lin_gmm_mod)
install.packages('sandwich')
install.packages("sandwich")
install.packages("sandwich")
install.packages("sandwich")
install.packages('momentfit')
blogdown:::new_post_addin()
install.packages('htmltools')
